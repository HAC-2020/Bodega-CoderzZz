# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from speech.proto_speech import audio2text_pb2 as speech_dot_proto__speech_dot_audio2text__pb2


class Audio2TextStub(object):
  """python -m grpc_tools.protoc --proto_path=protos -I. --python_out=./src/. --grpc_python_out=./src/. ./protos/speech/proto_speech/audio2text.proto

  *

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StreamingRecognize = channel.stream_stream(
        '/Audio2Text/StreamingRecognize',
        request_serializer=speech_dot_proto__speech_dot_audio2text__pb2.StreamingRecognizeRequest.SerializeToString,
        response_deserializer=speech_dot_proto__speech_dot_audio2text__pb2.StreamingRecognizeResponse.FromString,
        )


class Audio2TextServicer(object):
  """python -m grpc_tools.protoc --proto_path=protos -I. --python_out=./src/. --grpc_python_out=./src/. ./protos/speech/proto_speech/audio2text.proto

  *

  """

  def StreamingRecognize(self, request_iterator, context):
    """*
    Client can call this method multiple times to specify audio chunks.
    OPUS encoding and 100ms chunk is expected.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_Audio2TextServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StreamingRecognize': grpc.stream_stream_rpc_method_handler(
          servicer.StreamingRecognize,
          request_deserializer=speech_dot_proto__speech_dot_audio2text__pb2.StreamingRecognizeRequest.FromString,
          response_serializer=speech_dot_proto__speech_dot_audio2text__pb2.StreamingRecognizeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Audio2Text', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
